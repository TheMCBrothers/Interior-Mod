plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.+'
}

group = 'net.themcbrothers'

base {
    archivesName = 'TheMCBrothersInteriorMod'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }

    withJavadocJar()
    withSourcesJar()
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                interiormod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'interiormod'

            mods {
                interiormod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'interiormod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                interiormod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://nexus.themcbrothers.net/repository/maven-blamejared" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-mod" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-k4you" }
    maven { url = "https://nexus.themcbrothers.net/repository/maven-curse" }
}

dependencies {
    // Minecraft Forge
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

    // Configured
    if (project.hasProperty('configured_file_id')) {
        runtimeOnly fg.deobf("curse.maven:configured-457570:$configured_file_id")
    }

    // Just Enough Items
    if (project.hasProperty('jei_version')) {
        // compile against the JEI API but do not include it at runtime
        compileOnly(fg.deobf("mezz.jei:jei-$minecraft_version-common-api:$jei_version"))
        compileOnly(fg.deobf("mezz.jei:jei-$minecraft_version-forge-api:$jei_version"))
        // at runtime, use the full JEI jar for Forge
        runtimeOnly(fg.deobf("mezz.jei:jei-$minecraft_version-forge:$jei_version"))
    }
}

jar {
    archiveAppendix.set(minecraft_version)
    manifest {
        attributes([
                "Specification-Title"     : "interiormod",
                "Specification-Vendor"    : "TheMCBrothers",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : jar.archiveVersion,
                "Implementation-Vendor"   : "TheMCBrothers",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

javadoc {
    source = [sourceSets.main.allJava]
    failOnError = false
}

task deobfJar(type: Jar) {
    archiveAppendix.set(minecraft_version)
    archiveClassifier.set('deobf')
    from sourceSets.main.output
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveAppendix.set(minecraft_version)
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

javadocJar {
    archiveAppendix.set(minecraft_version)
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task apiJar(type: Jar) {
    archiveAppendix.set(minecraft_version)
    archiveClassifier.set('api')
    from sourceSets.main.allJava
    include 'net/themcbrothers/interiormod/api/**'
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives javadocJar
    archives apiJar
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            version = "$project.minecraft_version-$project.version"
            artifactId = "$project.mavenname"
            artifact jar
        }
    }
    repositories {
        maven {
            credentials {
                username = getSecret('nexus_uname')
                password = getSecret('nexus_pwd')
            }

            url 'https://nexus.themcbrothers.net/repository/maven-releases/'
        }
    }
}

private String getChangelogText(boolean hasTitle) {
    File changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.length() > 1) {
            String temp = it
            if (lineCount == 0) {
                if (hasTitle) {
                    temp = "## $modname $version"
                } else {
                    temp = ''
                }
            } else if (it.startsWith('-')) {
                temp = temp.replaceAll("(\\S+/\\S+)#(\\d+)\\b", "[\$0](https://github.com/\$1/issues/\$2)")
                temp = temp.replaceAll("#(\\d+)\\b(?!</a>)", "[\$0](https://github.com/$github_project/issues/\$1)")
            } else {
                temp = "#### $temp"
            }
            str += temp
            lineCount++
            return
        } else {
            done = true
        }
        return
    }
    return str
}

private String getSecret(String key) {
    def secret = System.getenv(key)
    if (secret != null) {
        return secret.trim()
    }

    File secretFile = file('secrets.properties')
    if (secretFile.canRead()) {
        Properties secretProps = new Properties()
        secretProps.load(new FileInputStream(secretFile))
        return secretProps.getProperty(key).toString()
    }
    return null
}

var curseForgeToken = getSecret("cf_key")
var modrinthToken = getSecret("modrinth_token")

if (curseForgeToken != null) {
    curseforge {
        apiKey = curseForgeToken

        project {
            id = cf_project
            changelog = getChangelogText(true)
            changelogType = 'markdown'
            releaseType = artifact_type
            addGameVersion(minecraft_version)
            mainArtifact(jar) {
                displayName = "$version for $minecraft_version"
                relations {
                    optionalDependency 'jei'
                }
            }
            addArtifact apiJar
        }
    }
}

if (modrinthToken != null) {
    modrinth {
        token = modrinthToken
        projectId = modrinth_project
        versionNumber = "$minecraft_version-$version"
        versionName = version.toString()
        versionType = artifact_type
        changelog = getChangelogText(false)
        uploadFile = jar
        additionalFiles.add(apiJar)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
