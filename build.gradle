buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.4.3'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'maven-publish'

group = 'net.themcbrothers'
archivesBaseName = 'TheMCBrothersInteriorMod'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: project.minecraft_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                interiormod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                interiormod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'interiormod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                interiormod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'prog'
        url = 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name = 'tterrag'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    // Minecraft Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    if (project.hasProperty('jei_version')) { // JEI
        // Configured, optional dependency
        runtimeOnly fg.deobf("curse.maven:configured-457570:$project.configured_file_id")
        // compile against the JEI API but do not include it at runtime
        compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
        compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
        // at runtime, use the full JEI jar for Forge
        runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    }
}

jar {
    archiveAppendix.set("$project.minecraft_version")
    manifest {
        attributes([
                "Specification-Title"     : "interiormod",
                "Specification-Vendor"    : "TheMCBrothers",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "TheMCBrothers",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

javadoc {
    failOnError = false
}

task deobfJar(type: Jar) {
    archiveAppendix.set("$project.minecraft_version")
    archiveClassifier.set('deobf')
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    archiveAppendix.set("$project.minecraft_version")
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveAppendix.set("$project.minecraft_version")
    archiveClassifier.set('javadoc')
    from javadoc.getDestinationDir()
}

task apiJar(type: Jar) {
    archiveAppendix.set("$project.minecraft_version")
    archiveClassifier.set('api')
    include 'net/themcbrothers/interiormod/api/**'
}

artifacts {
    if (project.hasProperty('doDeobfJar')) {
        archives deobfJar
    }
    if (project.hasProperty('doSourceJar')) {
        archives sourcesJar
    }
    if (project.hasProperty('doJavadocJar')) {
        archives javadocJar
    }
    if (project.hasProperty('doApiJar')) {
        archives apiJar
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            version = "$project.minecraft_version-$project.version"
            artifactId = "$project.mavenname"
            artifact jar
        }
    }
    repositories {
        maven {
            credentials {
                username = getSecret('nexus_uname')
                password = getSecret('nexus_pwd')
            }

            url 'https://nexus.themcbrothers.net/repository/maven-releases/'
        }
    }
}

private String getChangelogText() {
    File changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.length() > 1) {
            String temp = it
            if (lineCount == 0) {
                temp = "${modname} ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+/\\S+)#(\\d+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#(\\d+)\\b(?!</a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

private String getSecret(String key) {
    File secretFile = file('secret.properties')
    if (secretFile.canRead()) {
        Properties secretProps = new Properties()
        secretProps.load(new FileInputStream(secretFile))
        return secretProps.getProperty(key).toString()
    }
    return null
}

curseforge {
    apiKey = getSecret('cf_key');

    project {
        id = project.cf_project
        changelog = getChangelogText()
        changelogType = 'html'
        releaseType = project.artifact_type
        addGameVersion(project.minecraft_version)
        mainArtifact(jar) {
            displayName = "${version} for ${minecraft_version}"
            relations {
                optionalDependency 'jei'
            }
        }
        // addArtifact apiJar
    }
}

modrinth {
    token = getSecret('modrinth_token')
    projectId = project.modrinth_project
    versionNumber = project.version
    versionType = project.artifact_type
    changelog = getChangelogText()
    uploadFile = jar
    gameVersions = ["$project.minecraft_version"]
}