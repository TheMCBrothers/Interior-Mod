buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group = 'themcbros.interiormod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'TheMCBrothersInteriorMod'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

minecraft {
    mappings channel: 'snapshot', version: "${mcp_mappings}"
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                interiormod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                interiormod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'interiormod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                interiormod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'ForgeFS'
        url 'https://files.minecraftforge.net/maven'
    }
    maven {
        name 'amadornes'
        url 'https://maven.amadornes.com/'
    }
    maven {
        name 'prog'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'curseforge'
        url 'https://minecraft.curseforge.com/api/maven/'
    }
    maven {
        name 'hwyla'
        url 'https://tehnut.info/maven'
    }
    maven {
        name 'tterrag'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'BlameJared - Crafttweaker'
        url 'https://maven.blamejared.com/'
    }
    maven {
        name 'thiakil'
        url 'https://maven.thiakil.com'
    }
    maven { url 'https://maven.latmod.com/' }
    maven {
        url = "https://www.cursemaven.com"
    }
}

dependencies {
	// Minecraft Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    
    if (project.hasProperty('jei_version')) { // JEI
        compileOnly fg.deobf('com.feed_the_beast.mods:ftb-gui-library:1.0.0.18')
	    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
	    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
    }
    
    if (project.hasProperty('hwyla_version')) { // Hwyla
    	compile fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")
    }

    if (project.hasProperty('top_version')) { // The One Probe
        compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${top_version}:api")
        runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${top_version}")
    }

}

jar {
	appendix = "${project.minecraft_version}"
    manifest {
        attributes([
            "Specification-Title": "interiormod",
            "Specification-Vendor": "themcbrothers",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"themcbrothers",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

javadoc {
    failOnError = false
}

task deobfJar(type: Jar) {
    appendix = "${project.minecraft_version}"
    classifier = 'deobf'
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    appendix = "${project.minecraft_version}"
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    appendix = "${project.minecraft_version}"
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

task apiJar(type: Jar) {
    appendix = "${project.minecraft_version}"
    classifier = 'api'
    include 'tk/themcbros/interiormod/api/**'
}

artifacts {
    if (project.hasProperty('doDeobfJar')) {
        archives deobfJar
    }
    if (project.hasProperty('doSourceJar')) {
        archives sourcesJar
    }
    if (project.hasProperty('doJavadocJar')) {
        archives javadocJar
    }
    if (project.hasProperty('doApiJar')) {
        archives apiJar
    }
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            from components.java
            //artifact apiJar
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        } else {
            mavenLocal()
        }
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${modname} ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

String getCurseforgeAPIKey() {
    def secretFile = file('secret.properties')
    if (secretFile.canRead()) {
        Properties secretProps = new Properties()
        secretProps.load(new FileInputStream(secretFile))
        return secretProps['curseforge_key'].toString()
    }
    return null
}

curseforge {
    if (project.hasProperty('curse_type') && project.hasProperty('projectId')) {
        apiKey = getCurseforgeAPIKey();
    }

    project {
        id = project.projectId
        changelog = getChangelogText()
        changelogType = 'html'
        releaseType = project.curse_type
        addGameVersion(project.minecraft_version)
        mainArtifact(jar) {
            displayName = "${version} for ${minecraft_version}"
            relations {
                optionalDependency 'jei'
                optionalDependency 'the-one-probe'
                optionalDependency 'biomes-o-plenty'
	        }
        }
        // addArtifact apiJar
    }
}