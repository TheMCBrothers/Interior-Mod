plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.+'
    id 'me.shedaniel.unified-publishing' version '0.1.+'
}

group = 'net.themcbrothers'
version = mod_version

repositories {
    maven { url = "https://nexus.themcbrothers.net/repository/maven-mod-dependencies" }
    mavenLocal()
}

base {
    archivesName = archive_base
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }

    withSourcesJar()
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                "$mod_id" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                "$mod_id" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "$mod_id" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    // Minecraft Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    if (project.hasProperty('jei_version')) { // JEI
        // Configured, optional dependency
        runtimeOnly fg.deobf("curse.maven:configured-457570:$project.configured_file_id")
        // compile against the JEI API but do not include it at runtime
        compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
        compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
        // at runtime, use the full JEI jar for Forge
        runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, version: version,
            mod_authors         : mod_authors, mod_description: mod_description,
            github_repo         : github_repo, curse_project: curse_project,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    archiveAppendix = minecraft_version

    from(rootProject.file('LICENSE')) {
        rename { "${it}_${rootProject.name}" }
    }

    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version
        ])
    }

    exclude('net/themcbrothers/**/data/**')
    exclude('.cache/**')
}

sourcesJar {
    archiveAppendix = minecraft_version
    include('net/themcbrothers/**')
}

tasks.register('apiJar', Jar) {
    archiveAppendix = minecraft_version
    archiveClassifier = 'api'
    from sourceSets.main.output
    include 'net/themcbrothers/interiormod/api/**'
}

artifacts {
    archives apiJar
    archives jar
    archives sourcesJar
}

jar.finalizedBy('reobfJar')

publishing {
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register('mavenJava', MavenPublication) { MavenPublication publication ->
            from components.java
            publication.artifactId = archive_base
            publication.version = "$minecraft_version-$mod_version"
        }
    }
    repositories {
        maven {
            credentials {
                username = System.getenv('PUBLISH_USER')
                password = System.getenv('PUBLISH_PASSWORD')
            }

            url 'https://nexus.themcbrothers.net/repository/maven-releases/'
        }
    }
}

private String getChangelogText(boolean hasTitle) {
    File changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.length() > 1) {
            String temp = it
            if (lineCount == 0) {
                temp = hasTitle ? "## $mod_name $mod_version" : ''
            } else if (it.startsWith('-')) {
                temp = temp.replaceAll("(\\S+/\\S+)#(\\d+)\\b", "[\$0](https://github.com/\$1/issues/\$2)")
                temp = temp.replaceAll("#(\\d+)\\b(?!</a>)", "[\$0](https://github.com/$github_repo/issues/\$1)")
            } else {
                temp = "#### $temp"
            }
            str += "$temp\n"
            lineCount++
            return
        } else {
            done = true
        }
        return
    }
    return str
}

unifiedPublishing {
    project {
        version = "$minecraft_version-$mod_version"
        displayName = "[$minecraft_version] v$mod_version"
        releaseType = project.artifact_type
        gameVersions = [minecraft_version]
        gameLoaders = ["forge"]

        mainPublication tasks.jar

        var curseforgeToken = System.getenv('CURSEFORGE_TOKEN')
        var modrinthToken = System.getenv('MODRINTH_TOKEN')

        if (curseforgeToken != null) {
            curseforge {
                token = curseforgeToken
                id = project.curse_project
                changelog = getChangelogText(true)
                gameVersions.addAll "Java 17"

                relations {
                    optional "jei"
                }
            }
        }

        if (modrinthToken != null) {
            modrinth {
                token = modrinthToken
                id = project.modrinth_project
                changelog = getChangelogText(false)

                relations {
                    optional "jei"
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}